# ================================
# ðŸ“Š SALES REPRESENTATIVE ANALYSIS
# ================================

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")

# -----------------------
# âœ… Inbuilt Sample Dataset
# -----------------------
data = {
    "Sales_Representative": [
        "Alice", "Bob", "Charlie", "Alice", "Bob", "Charlie",
        "Alice", "Bob", "Charlie", "Alice", "Bob", "Charlie"
    ],
    "Quarter": [
        "Q1", "Q1", "Q1",
        "Q2", "Q2", "Q2",
        "Q3", "Q3", "Q3",
        "Q4", "Q4", "Q4"
    ],
    "Region": [
        "North", "South", "East",
        "North", "South", "East",
        "North", "South", "East",
        "North", "South", "East"
    ],
    "Product_Category": [
        "Electronics", "Furniture", "Clothing",
        "Electronics", "Furniture", "Clothing",
        "Electronics", "Furniture", "Clothing",
        "Electronics", "Furniture", "Clothing"
    ],
    "Total_Sales_Volume": [
        120, 100, 80,
        150, 110, 90,
        140, 105, 95,
        130, 120, 85
    ],
    "Revenue_Generated": [
        240000, 200000, 160000,
        300000, 220000, 180000,
        280000, 210000, 190000,
        260000, 230000, 170000
    ],
    "Customer_Satisfaction": [
        4.5, 4.2, 4.0,
        4.6, 4.1, 3.9,
        4.4, 4.0, 4.2,
        4.7, 4.3, 4.1
    ]
}

df = pd.DataFrame(data)

# -----------------------------------------------------
# ðŸ”¹ 1. Total Sales Volume and Revenue by Representative
# -----------------------------------------------------
sales_summary = df.groupby("Sales_Representative")[["Total_Sales_Volume", "Revenue_Generated"]].sum().reset_index()
print("\nTotal Sales Volume and Revenue by Sales Representative:\n")
print(sales_summary.sort_values(by="Revenue_Generated", ascending=False))

plt.figure(figsize=(10, 5))
sns.barplot(
    data=sales_summary,
    x="Sales_Representative",
    y="Revenue_Generated",
    hue="Sales_Representative",
    palette="Blues",
    legend=False
)
plt.title("Total Revenue Generated by Each Sales Representative")
plt.ylabel("Revenue Generated")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# -----------------------------------------------
# ðŸ”¹ 2. Consistency (Standard Deviation per Quarter)
# -----------------------------------------------
consistency = df.groupby(["Sales_Representative", "Quarter"])["Revenue_Generated"].sum().unstack().std(axis=1)
consistent_rep = consistency.idxmin()
print(f"\nMost consistent performer across quarters: {consistent_rep}")
print(consistency.sort_values())

plt.figure(figsize=(8, 5))
sns.barplot(
    x=consistency.index,
    y=consistency.values,
    hue=consistency.index,
    palette="coolwarm",
    legend=False
)
plt.title("Consistency of Sales Representatives (Std. Dev. of Quarterly Revenue)")
plt.ylabel("Revenue Standard Deviation")
plt.xlabel("Sales Representative")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ------------------------------------------
# ðŸ”¹ 3. Regional Performance Summary
# ------------------------------------------
region_perf = df.groupby("Region")[["Total_Sales_Volume", "Revenue_Generated"]].sum().reset_index()
print("\nRegional Performance Summary:\n")
print(region_perf)

plt.figure(figsize=(8, 5))
sns.barplot(
    data=region_perf,
    x="Region",
    y="Revenue_Generated",
    hue="Region",
    palette="viridis",
    legend=False
)
plt.title("Regional Patterns in Sales Revenue")
plt.ylabel("Total Revenue")
plt.tight_layout()
plt.show()

# ---------------------------------------------------
# ðŸ”¹ 4. Product Categories sold by Top 3 Representatives
# ---------------------------------------------------
top_reps = sales_summary.sort_values(by="Revenue_Generated", ascending=False).head(3)["Sales_Representative"]
top_rep_sales = df[df["Sales_Representative"].isin(top_reps)]
top_cat = top_rep_sales.groupby("Product_Category")["Total_Sales_Volume"].sum().reset_index()

print("\nProduct categories most sold by top-performing representatives:\n")
print(top_cat.sort_values(by="Total_Sales_Volume", ascending=False))

plt.figure(figsize=(8, 5))
sns.barplot(
    data=top_cat,
    x="Product_Category",
    y="Total_Sales_Volume",
    hue="Product_Category",
    palette="coolwarm",
    legend=False
)
plt.title("Top Product Categories Sold by Top 3 Representatives")
plt.ylabel("Total Sales Volume")
plt.tight_layout()
plt.show()

# ----------------------------------------
# ðŸ”¹ 5. Correlation between Satisfaction & Revenue
# ----------------------------------------
correlation = df[["Revenue_Generated", "Customer_Satisfaction"]].corr().iloc[0, 1]
print(f"\nCorrelation between Customer Satisfaction and Revenue: {correlation:.2f}")

plt.figure(figsize=(6, 5))
sns.scatterplot(
    data=df,
    x="Customer_Satisfaction",
    y="Revenue_Generated",
    hue="Region",
    palette="Set2"
)
plt.title("Customer Satisfaction vs. Revenue Generated")
plt.tight_layout()
plt.show()

# ---------------------
# ðŸ”¹ Final Summary
# ---------------------
print("\nANALYSIS COMPLETE!")
print(f"Most Consistent Sales Representative: {consistent_rep}")
print(f"Top Revenue Generator: {sales_summary.sort_values(by='Revenue_Generated', ascending=False).iloc[0,0]}")
print(f"Best Performing Region: {region_perf.sort_values(by='Revenue_Generated', ascending=False).iloc[0,0]}")
print(f"Correlation between Satisfaction & Revenue: {correlation:.2f}")
